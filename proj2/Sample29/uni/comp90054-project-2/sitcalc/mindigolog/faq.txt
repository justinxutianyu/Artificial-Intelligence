MIndiGolog Lab FAQ
------------------

1. What is the 'op' operator and where is it defined?

The 'op' operator is standard Prolog, as defined in the International
Standards Organisation (ISO) definition of Prolog. For example,

:- op(660,xfy,/). % Nondeterministic choice

includes three arguments: precedence e.g. 600, the type e.g. xfy infix
and the symbol e.g. "/".

Note that the ConGolog program defined in the following publication is
not ISO Prolog:

High-level program execution and the situation calculus Reading:
Giuseppe De Giacomo, Yves Lesprance, and Hector J. Levesque., ConGolog,
a concurrent programming language based on the situation calculus,
Artificial Intelligence, 121(1-2):109--169 (2000)

Ryan Kelly has kindly ported ConGolog to ISO Prolog, used in lab1, that
should run under any ISO Prolog implementation, such as SWI Prolog.

2. Where is e.g. "pi" defined?

pi is defined in congolog.pl as follows:

%%  Nondeterministic choice of arguments may terminate if there is some
%%  choice of arguments for which the program will terminate.
final(pi(V,D),S) :-
    sub(V,_,D,Dr), final(Dr,S).

%%  Nondeterministic choice of arguments may transition if there is an
%%  appropriate binding of the arguments for which the program may
transition.  trans(pi(V,D),S,Dp,Sp) :-
    sub(V,_,D,Dr), trans(Dr,S,Dp,Sp).

Note that the (ground) predicate 'pi' is not defined as a rule by
itself but as an arguments of both the 'final' and 'trans' predicates.

The above form is standard (ISO) Prolog and, not only is this standard
Prolog, but this form is actually encouraged in programming as it helps
to give the Prolog interpreter (and/or compiler) more information  in
relation to where it can expect such predicates to occur - and hence
work to prune more effectively.

3. How could I get more concurrency, e.g. to always chop tomatoes for
both dishes, omellete and salad, before moving on to subsequent steps
of both these recipies?

- One way would be to re-program to explicitly name the sub-steps (or
subgoals) involved in the recipies and explicitly provide instructions
for the concurrent execution of these subgoals.

- Another way would be to try modifying the semantics of the language
to achieve more interleaved execution. For example modify the
definition of the trans predicate in congolog.pl so that the recursive
call to trans calls the concurrent operations in reverse order, so
change (in congolog.pl) things like

d1 || d2 :- trans(d1,a,e1), e1 || d2.

to something like

d1 || d2 :- trans(d1,a,e1), d2 || e1.

- Yet another way to consider, would be to modify how concurrent
execution is executed to state that two actions must be executed in
parallel it is possible to do so, something like

if poss(a1) and poss(a2) do both actions a1 and a2 concurrently else do
a1 if can't do a2 else do a2 if can't do a1.

4. I just noticed that there are "TODO" comments in all of *.pl files.
 Are we meant to do them?
 
It's perfectly safe to ignore those, they're simply notes to myself 
about things to implement or discuss for my thesis.

Ryan

5. Why does my MIndiGolog program seem to hang?

Ryan had a look at Edwins code:

> Edwin had a case where he believes the provided code for ConGolog >
hangs. If I'm correct I think Ben and Andrew you also had a similar
experience?

Ryan Kelly writes:

I've tracked this problem down using Edwin's sample code.  It turns out
that the interpreter doesn't hang, it just takes a *really* long time
to report 'No'.

The reason is that there are many, many legal executions of the program
doPlaceTypeIn(thomas,sugar,bowl1) // doPlaceTypeIn(thomas,egg,bowl1),
because there are many different ways to interleave actions from the
two procedures.  ConGolog explores each of these executions in turn,
but of course they all fail when they are instructed to add an
ingredient that is not available, and it eventually returns 'No' as
expected.

It would be interesting to make a placeNumTypeIn(agt,type,num,dest)
procedure that places a specific number of units of an ingredient in a
bowl, which could fail early if the ingredients were not available.

(This is also a case where IndiGolog's control of the search space
would be useful, if we get time we will cover in lectures)

> When I think about it in this case even if the main procedure is done 
> in parallel it shouldn't take too long to find the first solution 
> because isn't congolog supposed to find the first solution 
> first,which is the same as finding a solution to executing the three procedures sequentially?
> Shouldn't it take roughly the same time as finding a solution to the 
> sequential execution? Yet with my program it took forever.

I noticed a significant speedup with the following new definition:

%%  Nondeterministically select an object of a given type, gain 
control %%  of it, and place it inside a container object.
%%
proc(doPlaceTypeIn(Agt,Type,Dest),
    pi(obj,?and(obj_is_type(obj,Type),not(used(obj,now)))
           : acquire_object(Agt,obj)
           : doPlaceIn(Agt,obj,Dest))
   ).


6. How do I program sub-goals?

I've attached a modified domain.pl according to Ben's changes.  

I haven't actually added the frypan type, but have modified the code 
for ovens so that it's a straightfoward copy-and-paste job.

     Ryan

On Thu, 2007-03-29 at 14:03 +1000, Ben White wrote:
> Hi Ryan,
> 
> The changes I made to domain.pl are below -- the differences are:
> 
>   - adding the frypan type;
>   - making cooking_appliance a supertype of frypan and oven;
>   - including cooking_appliance as a subtype of container and
>     removing oven as a direct subtype of container;
>   - adding clauses to contents/3 for frypan; and
>   - changing "\+ obj_is_type(Obj,oven)" to
>     "\+ obj_is_type(Obj,cooking_appliance)" in contents/3.
> 
> Ben
> 
> --- ../congolog_swi/domain.pl	2007-03-13 21:52:00.000000000 +1100
> +++ domain.pl	2007-03-29 13:57:22.000000000 +1000
> @@ -47,6 +47,8 @@
>      member(Obj,[board1,board2]).
>  prim_obj(Obj,oven) :-
>      member(Obj,[oven1]).
> +prim_obj(Obj,frypan) :-
> +    member(Obj,[frypan1]).
>  prim_obj(Obj,flour) :-     % flour measured in 'units' for simplicity
>      member(Obj,[flour1,flour2]).
>  prim_obj(Obj,sugar) :-     % same for the sugar
> @@ -67,8 +69,10 @@
>  %%  This predicate is true when all objects of type SubType are  %%  
> also of type SuperType.
>  %%
> +super_type(Type,cooking_appliance) :-
> +    member(Type,[oven,frypan]).
>  super_type(Type,container) :-
> -    member(Type,[bowl,board,oven]).
> +    member(Type,[bowl,board,cooking_appliance]).
>  super_type(Type,ingredient) :-
>      member(Type,[flour,egg,tomato,lettuce,sugar]).
> 
> @@ -236,7 +240,7 @@
>        ;
>        %% If the container is in an oven, its contents are baking.
>        %% If they are not encapsulated in a baking() indicator then do so.
> -      \+ obj_is_type(Obj,oven), obj_is_type(Oven,oven),
> +      \+ obj_is_type(Obj,cooking_appliance), obj_is_type(Oven,oven),
>        contents(Oven,Obj,do(A,S)), contents(Obj,OldConts,S),
>        (  OldConts = baking(BakedConts) ->
>               Conts = baking(BakedConts) @@ -245,10 +249,26 @@
>        )
>        ;
>        %% If the container was taken out of the oven, update to baked()
> -      \+ obj_is_type(Obj,oven), obj_is_type(Oven,oven),
> +      \+ obj_is_type(Obj,cooking_appliance), obj_is_type(Oven,oven),
>        contents(Oven,Obj,S), A = transfer(_,Oven,_),
>        contents(Obj,baking(BakedConts),S),
>        Conts = baked(BakedConts)
> +      ;
> +      %% If the container is in an frypan, its contents are frying.
> +      %% If they are not encapsulated in a frying() indicator then do so.
> +      \+ obj_is_type(Obj,cooking_appliance), obj_is_type(Frypan,frypan),
> +      contents(Frypan,Obj,do(A,S)), contents(Obj,OldConts,S),
> +      (  OldConts = frying(FriedConts) ->
> +             Conts = frying(FriedConts)
> +         ;
> +             Conts = frying(OldConts)
> +      )
> +      ;
> +      %% If the container was taken out of the frypan, update to fried()
> +      \+ obj_is_type(Obj,cooking_appliance), obj_is_type(Frypan,frypan),
> +      contents(Frypan,Obj,S), A = transfer(_,Frypan,_),
> +      contents(Obj,frying(FriedConts),S),
> +      Conts = fried(FriedConts)
>      )
>      ;
>      %% Or it was true, and didnt become false...
> @@ -270,12 +290,20 @@
>          A = chop(_,Obj)
>          ;
>          %% The object is in an oven, hence will change
> -        \+ obj_is_type(Obj,oven), obj_is_type(Oven,oven),
> +        \+ obj_is_type(Obj,cooking_appliance), 
> + obj_is_type(Oven,oven),
>          contents(Oven,Obj,do(A,S))
>          ;
>          %% The object was just taken out of an oven, hence will change
> -        \+ obj_is_type(Obj,oven), obj_is_type(Oven,oven),
> +        \+ obj_is_type(Obj,cooking_appliance), 
> + obj_is_type(Oven,oven),
>          contents(Oven,Obj,S), A = transfer(_,Oven,_)
> +        ;
> +        %% The object is in a frypan, hence will change
> +        \+ obj_is_type(Obj,cooking_appliance), obj_is_type(Frypan,frypan),
> +        contents(Frypan,Obj,do(A,S))
> +        ;
> +        %% The object was just taken out of an frypan, hence will change
> +        \+ obj_is_type(Obj,cooking_appliance), obj_is_type(Frypan,frypan),
> +        contents(Frypan,Obj,S), A = transfer(_,Frypan,_)
>      )).

--------------------------------------------------------------------------

> How did you do this? 

Bear in mind that I haven't actually tried this, 
it's just a suggestion based on what I think is causing the problem...

> Did you modify the trans def of
> conc by introducing an if then else in the first choicepoint instead 
> of having Ands? If so where did you put the if then else?

I envisage something like this skeleton:

  (step(D1,S,Dr1,do(C1,T1,S)) ->
     step(D2,S,Dr2,do(C2,T2,S)) ->
        possible to do at same time ->
            Sp = do(C1 + C2,T1,S)
        ;
        Sp = do(C1,T1,S)
     ;
     Sp = do(C1,T1,S)
   ; 
   fail
  )
  ;
  trans(D1,S,Dp,Sp) etc
  ;
  trans(D2,S,Dp,Sp) etc


Using the if-then-else, the clause for concurrency doesn't leave any 
choicepoints - it tries full concurrency, and if it doesn't work it 
goes straight ahead and does either-or concurrency.

Note that there will be executions that are legal according to the 
semantics of the language that are not found by this modified code, 
because it prunes choicepoints.

Another possibility for a speed improvement would be to make object 
choices in a random order, so there's less chance of picking the same 
object over and over again.  Something like this:

   prim_obj(Obj,sugar) :-
       randomize_list([sugar1,sugar2,sugar3,sugar4],RList),
       member(Obj,RList).

(Of course you'd have to implement randomize_list/2).

>  I was wondering
> whether this would make any difference since prolog would still try to 
> make the condition true by exhaustively trying all combinations to 
> make the condition true. The net effect would be the same as the 
> original definition. Am I misunderstanding anything?

It would only try to make the condition true once, eliminating any 
backtracking over the condition.  If-then-else in prolog contains 
an implicit cut (one of the many little joys that make it 
logically unsound, and that are fixed in e.g. Mercury)

     Ryan

-----------------------------------------------------------------

After investigating the issue reported in the lab today, it's not a bug in the semantics, but in the way online execution is handled.

Basically, the problem is that this is a perfectly legal sequence of steps:

    acquire_object(thomas,bowl1) // end_task(chop(richard,board2))

  -->

    do [acquire_object(thomas,bowl1), end_task(chop(richard,board2))]

  -->

    nil // end_task(chop(richard,board2))

There's nothing that *forces* a program waiting on a natural action to 
make a transition when that natural action happens.

In offline mode this is no problem as such executions eventually fail.
But for online execution this can cause the program to fail 
(which we saw in the lab today).

The short-term solution is to remove all end_task() actions from your 
programs. Since an agent is not able to do anything else while it's 
performing a task, the actions don't need to be stated explicitly.  
This will make the programs we saw in the lab today run to 
completion instead of failing.

Longer term, I'm adjusting the way online execution handles natural 
actions to avoid this.

Ryan


